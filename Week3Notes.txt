Overflow and Underflow:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Output:
32-bit before decrement:
  signed:   0
  unsigned: 0
32-bit after decrement:
  signed:   -1
  unsigned: 4294967295
16-bit before increment:
  signed:   32767
  unsigned: 32768
16-bit after increment:
  signed:   -32768
  unsigned: 32768

For the 16-bit signed integer you notice that the result of incremting the max value is 
represented by 1 which cause an over flow. 

For the 32-bit signed integer you notice that the result of decremting the interger is 
represented by 0

Dynamic Range and Precision:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Output: 
int32_t:
  big   = 100000000
  small = 1
  sum   = 100000000

float:
  big   = 100000000.0
  small = 1.0
  sum   = 100000001.0

You can see the difference between adding int values and float values. An int int does not add
although the float value does. 


Integer Divison:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Output:
   1   2   3   4   5   6   7   8   9  10
---- ---- ---- ---- ---- ---- ---- ---- ---- ----
  +1   0   0   0   0   0   0   0   0   0
  +2   0   1   1   1   1   1   1   1   1
  +3   0   1   1   1   1   1   1   1   1
  +4   0   1   1   1   1   1   1   1   1
  +5   0   1   1   1   1   1   1   1   1
  +6   0   1   1   1   1   1   1   1   1
  +7   0   1   1   1   1   1   1   1   1
  +8   0   1   1   1   1   1   1   1   1
  +9   0   1   1   1   1   1   1   1   1
 +10   0   1   1   1   1   1   1   1   1

You can see the results are normal and the results are just 1. 


Output:
-10: -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1
-9: -1 -1 -1 -1 -1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1
-8: -1 -1 -1 -1 -1 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2
-7: -1 -1 -1 -1 -1 0 0 0 0 0 0 0 1 1 1 1 2 2 2 2
-6: -1 -1 -1 -1 -1 0 0 0 0 0 0 0 1 1 1 2 2 2 3 3
-5: -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 2 2 2 3 3 3
-4: -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2
-3: -1 -1 -1 -1 -1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1
-2: -1 -1 -1 -1 -1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1
-1: -1 -1 -1 -1 -1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1


Floating-Point Division:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Output: 
 1      2      3      4      5      6      7      8      9     10
 -------------------------------------------------------------------------
  1:  1.000  0.500  0.333  0.250  0.200  0.167  0.143  0.125  0.111  0.100
  2:  2.000  1.000  0.667  0.500  0.400  0.333  0.286  0.250  0.222  0.200
  3:  3.000  1.500  1.000  0.750  0.600  0.500  0.429  0.375  0.333  0.300
  4:  4.000  2.000  1.333  1.000  0.800  0.667  0.571  0.500  0.444  0.400
  5:  5.000  2.500  1.667  1.250  1.000  0.833  0.714  0.625  0.556  0.500
  6:  6.000  3.000  2.000  1.500  1.200  1.000  0.857  0.750  0.667  0.600
  7:  7.000  3.500  2.333  1.750  1.400  1.143  1.000  0.875  0.778  0.700
  8:  8.000  4.000  2.667  2.000  1.600  1.333  1.125  1.000  0.889  0.800
  9:  9.000  4.500  3.000  2.250  1.800  1.500  1.278  1.111  1.000  0.900
 10: 10.000  5.000  3.333  2.500  2.000  1.667  1.429  1.250  1.111  1.000

The result of the division of all possible cobinations of numbers from 1 to 10. Each column reprsents 
the denominator and each row representing the numerator. 

Output: 
-10         -9         -8         -7         -6         -5         -4         -3         -2         -1         +0         +1         +2         +3         +4         +5         +6         +7         +8         +9        +10
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-10:  +1.000e+00 +1.111e+00 +1.250e+00 +1.429e+00 +1.667e+00 +2.000e+00 +2.500e+00 +3.333e+00 +5.000e+00 +1.000e+01       -inf -1.000e+01 -5.000e+00 -3.333e+00 -2.500e+00 -2.000e+00 -1.667e+00 -1.429e+00 -1.250e+00 -1.111e+00 -1.000e+00
 -9:  +9.000e-01 +1.000e+00 +1.125e+00 +1.286e+00 +1.500e+00 +1.800e+00 +2.250e+00 +3.000e+00 +4.500e+00 +9.000e+00       -inf -9.000e+00 -4.500e+00 -3.000e+00 -2.250e+00 -1.800e+00 -1.500e+00 -1.286e+00 -1.125e+00 -1.000e+00 -9.000e-01
 -8:  +8.000e-01 +8.889e-01 +1.000e+00 +1.143e+00 +1.333e+00 +1.600e+00 +2.000e+00 +2.667e+00 +4.000e+00 +8.000e+00       -inf -8.000e+00 -4.000e+00 -2.667e+00 -2.000e+00 -1.600e+00 -1.333e+00 -1.143e+00 -1.000e+00 -8.889e-01 -8.000e-01
 -7:  +7.000e-01 +7.778e-01 +8.750e-01 +1.000e+00 +1.167e+00 +1.400e+00 +1.750e+00 +2.333e+00 +3.500e+00 +7.000e+00       -inf -7.000e+00 -3.500e+00 -2.333e+00 -1.750e+00 -1.400e+00 -1.167e+00 -1.000e+00 -8.750e-01 -7.778e-01 -7.000e-01
 -6:  +6.000e-01 +6.667e-01 +7.500e-01 +8.571e-01 +1.000e+00 +1.200e+00 +1.500e+00 +2.000e+00 +3.000e+00 +6.000e+00       -inf -6.000e+00 -3.000e+00 -2.000e+00 -1.500e+00 -1.200e+00 -1.000e+00 -8.571e-01 -7.500e-01 -6.667e-01 -6.000e-01
 -5:  +5.000e-01 +5.556e-01 +6.250e-01 +7.143e-01 +8.333e-01 +1.000e+00 +1.250e+00 +1.667e+00 +2.500e+00 +5.000e+00       -inf -5.000e+00 -2.500e+00 -1.667e+00 -1.250e+00 -1.000e+00 -8.333e-01 -7.143e-01 -6.250e-01 -5.556e-01 -5.000e-01
 -4:  +4.000e-01 +4.444e-01 +5.000e-01 +5.714e-01 +6.667e-01 +8.000e-01 +1.000e+00 +1.333e+00 +2.000e+00 +4.000e+00       -inf -4.000e+00 -2.000e+00 -1.333e+00 -1.000e+00 -8.000e-01 -6.667e-01 -5.714e-01 -5.000e-01 -4.444e-01 -4.000e-01
 -3:  +3.000e-01 +3.333e-01 +3.750e-01 +4.286e-01 +5.000e-01 +6.000e-01 +7.500e-01 +1.000e+00 +1.500e+00 +3.000e+00       -inf -3.000e+00 -1.500e+00 -1.000e+00 -7.500e-01 -6.000e-01 -5.000e-01 -4.286e-01 -3.750e-01 -3.333e-01 -3.000e-01
 -2:  +2.000e-01 +2.222e-01 +2.500e-01 +2.857e-01 +3.333e-01 +4.000e-01 +5.000e-01 +6.667e-01 +1.000e+00 +2.000e+00       -inf -2.000e+00 -1.000e+00 -6.667e-01 -5.000e-01 -4.000e-01 -3.333e-01 -2.857e-01 -2.500e-01 -2.222e-01 -2.000e-01
 -1:  +1.000e-01 +1.111e-01 +1.250e-01 +1.429e-01 +1.667e-01 +2.000e-01 +2.500e-01 +3.333e-01 +5.000e-01 +1.000e+00       -inf -1.000e+00 -5.000e-01 -3.333e-01 -2.500e-01 -2.000e-01 -1.667e-01 -1.429e-01 -1.250e-01 -1.111e-01 -1.000e-01
 +0:  -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00 -0.000e+00       -nan +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00 +0.000e+00
 +1:  -1.000e-01 -1.111e-01 -1.250e-01 -1.429e-01 -1.667e-01 -2.000e-01 -2.500e-01 -3.333e-01 -5.000e-01 -1.000e+00       +inf +1.000e+00 +5.000e-01 +3.333e-01 +2.500e-01 +2.000e-01 +1.667e-01 +1.429e-01 +1.250e-01 +1.111e-01 +1.000e-01
 +2:  -2.000e-01 -2.222e-01 -2.500e-01 -2.857e-01 -3.333e-01 -4.000e-01 -5.000e-01 -6.667e-01 -1.000e+00 -2.000e+00       +inf +2.000e+00 +1.000e+00 +6.667e-01 +5.000e-01 +4.000e-01 +3.333e-01 +2.857e-01 +2.500e-01 +2.222e-01 +2.000e-01
 +3:  -3.000e-01 -3.333e-01 -3.750e-01 -4.286e-01 -5.000e-01 -6.000e-01 -7.500e-01 -1.000e+00 -1.500e+00 -3.000e+00       +inf +3.000e+00 +1.500e+00 +1.000e+00 +7.500e-01 +6.000e-01 +5.000e-01 +4.286e-01 +3.750e-01 +3.333e-01 +3.000e-01
 +4:  -4.000e-01 -4.444e-01 -5.000e-01 -5.714e-01 -6.667e-01 -8.000e-01 -1.000e+00 -1.333e+00 -2.000e+00 -4.000e+00       +inf +4.000e+00 +2.000e+00 +1.333e+00 +1.000e+00 +8.000e-01 +6.667e-01 +5.714e-01 +5.000e-01 +4.444e-01 +4.000e-01
 +5:  -5.000e-01 -5.556e-01 -6.250e-01 -7.143e-01 -8.333e-01 -1.000e+00 -1.250e+00 -1.667e+00 -2.500e+00 -5.000e+00       +inf +5.000e+00 +2.500e+00 +1.667e+00 +1.250e+00 +1.000e+00 +8.333e-01 +7.143e-01 +6.250e-01 +5.556e-01 +5.000e-01
 +6:  -6.000e-01 -6.667e-01 -7.500e-01 -8.571e-01 -1.000e+00 -1.200e+00 -1.500e+00 -2.000e+00 -3.000e+00 -6.000e+00       +inf +6.000e+00 +3.000e+00 +2.000e+00 +1.500e+00 +1.200e+00 +1.000e+00 +8.571e-01 +7.500e-01 +6.667e-01 +6.000e-01
 +7:  -7.000e-01 -7.778e-01 -8.750e-01 -1.000e+00 -1.167e+00 -1.400e+00 -1.750e+00 -2.333e+00 -3.500e+00 -7.000e+00       +inf +7.000e+00 +3.500e+00 +2.333e+00 +1.750e+00 +1.400e+00 +1.167e+00 +1.000e+00 +8.750e-01 +7.778e-01 +7.000e-01
 +8:  -8.000e-01 -8.889e-01 -1.000e+00 -1.143e+00 -1.333e+00 -1.600e+00 -2.000e+00 -2.667e+00 -4.000e+00 -8.000e+00       +inf +8.000e+00 +4.000e+00 +2.667e+00 +2.000e+00 +1.600e+00 +1.333e+00 +1.143e+00 +1.000e+00 +8.889e-01 +8.000e-01
 +9:  -9.000e-01 -1.000e+00 -1.125e+00 -1.286e+00 -1.500e+00 -1.800e+00 -2.250e+00 -3.000e+00 -4.500e+00 -9.000e+00       +inf +9.000e+00 +4.500e+00 +3.000e+00 +2.250e+00 +1.800e+00 +1.500e+00 +1.286e+00 +1.125e+00 +1.000e+00 +9.000e-01
+10:  -1.000e+00 -1.111e+00 -1.250e+00 -1.429e+00 -1.667e+00 -2.000e+00 -2.500e+00 -3.333e+00 -5.000e+00 -1.000e+01       +inf +1.000e+01 +5.000e+00 +3.333e+00 +2.500e+00 +2.000e+00 +1.667e+00 +1.429e+00 +1.250e+00 +1.111e+00 +1.000e+00
	
The result of the division of all possible cobinations of numbers from -10 to 10. Each column reprsents 
the denominator and each row representing the numerator. 


Building Values From Bits:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I was not able to get "reinterpret_cast" to output "5.078125e-02", my result are below.
Output:
x = 1023410213
f = +3.12501378e-02

Output:
initially:
  x = 0
after setting bits:
  x = 571228672
after first bit 3 toggle:
  x = 571228680
after second bit 3 toggle:
  x = 571228672
after clearing bit 7:
  x = 571228672
after clearing bits 16-31:
  x = 16896

The results show the values of x after all of the bitwise operations. We want to see how they change
the binary of how x is represented.

Bit Buffer Size:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Output:
it takes 0 8-bit words to store 0 bits
it takes 1 8-bit words to store 1 bits
it takes 1 8-bit words to store 7 bits
it takes 1 8-bit words to store 8 bits
it takes 2 8-bit words to store 16 bits
it takes 3 8-bit words to store 17 bits
it takes 4 8-bit words to store 32 bits
it takes 5 8-bit words to store 33 bits
it takes 8 8-bit words to store 64 bits
it takes 9 8-bit words to store 65 bits
it takes 0 16-bit words to store 0 bits
it takes 1 16-bit words to store 1 bits
it takes 1 16-bit words to store 7 bits
it takes 1 16-bit words to store 8 bits
it takes 1 16-bit words to store 16 bits
it takes 2 16-bit words to store 17 bits
it takes 2 16-bit words to store 32 bits
it takes 3 16-bit words to store 33 bits
it takes 4 16-bit words to store 64 bits
it takes 5 16-bit words to store 65 bits
it takes 0 32-bit words to store 0 bits
it takes 1 32-bit words to store 1 bits
it takes 1 32-bit words to store 7 bits
it takes 1 32-bit words to store 8 bits
it takes 1 32-bit words to store 16 bits
it takes 1 32-bit words to store 17 bits
it takes 1 32-bit words to store 32 bits
it takes 2 32-bit words to store 33 bits
it takes 2 32-bit words to store 64 bits
it takes 3 32-bit words to store 65 bits

The results show how many N bits need to be stored in the list of N bit sizes. 


